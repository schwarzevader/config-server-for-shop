

server.port=8073

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka

spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

spring.security.oauth2.client.provider.keycloak.issuer-uri= http://localhost:8080/realms/spring-microservice
spring.security.oauth2.client.registration.oauth2-client-credentials.client-id=shop-gateway
spring.security.oauth2.client.registration.oauth2-client-credentials.client-secret=QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
spring.security.oauth2.client.registration.oauth2-client-credentials.scope=openid, profile, roles
spring.security.oauth2.client.registration.oauth2-client-credentials.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.oauth2-client-credentials.redirect-uri='{baseUrl}/login/oauth2/code/keycloak'
spring.security.oauth2.client.registration.oauth2-client-credentials.provider=keycloak
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code

#yml

#            issuer-uri: http://localhost:8080/realms/spring-microservice
#            jwk-set-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
#        registration:
#          keycloak-spring-gateway-client:
#            provider: my-keycloak-provider
#            client-id: shop-gateway
#            client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
#            authorization-grant-type: authorization_code
#            redirect-uri: '{baseUrl}/login/oauth2/code/keycloak'
