#server.port=8073

#eureka.instance.preferIpAddress = true
#eureka.client.registerWithEureka = true
#eureka.client.fetchRegistry = true
#eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka

#spring.cloud.loadbalancer.ribbon.enable=false

#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#properties


#keycloak.realm = spring-microservices
#---
#keycloak.auth-server-url = http://localhost:8080/realms/spring-microservices
#---
#keycloak.auth-server-url= http://localhost:8080/auth/realms/spring-microservice
#keycloak.ssl-required = external
#keycloak.resource = shop-gateway
#keycloak.resource = keycloak
#keycloak.credentials.secret = FQFchTCC9OgSx2kYzUBOINdqaZXHevHf
#keycloak.credentials.secret = QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
#keycloak.use-resource-role-mappings = true
#keycloak.bearer-only = true

#spring.cloud.gateway.routes[0].id=shop
#spring.cloud.gateway.routes[0].uri=lb://shop
#spring.cloud.gateway.routes[0].predicates[0]=Path=/products/page/**
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET

#pring.cloud.gateway.routes[0].id=page
#spring.cloud.gateway.routes[0].uri=lb://shop
#spring.cloud.gateway.routes.[0].predicates[0]=Path=/**
#--
#spring.cloud.gateway.routes.[0].predicates[0]=Path=/products/page/**
#spring.cloud.gateway.routes.[0].predicates[0]=Path=/products/**
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET
#spring.cloud.gateway.routes.[0].predicates[0]=Path=/products/page/**
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET

#spring.cloud.gateway.routes.[1].id=newG
#spring.cloud.gateway.routes[1].uri=lb://shop
#spring.cloud.gateway.routes.[1].predicates[0]=Path=/products/new
#spring.cloud.gateway.routes[1].predicates[1]=Method=GET


#spring.cloud.gateway.routes.[2].id=newP
#spring.cloud.gateway.routes[2].uri=lb://shop
#spring.cloud.gateway.routes.[2].predicates[0]=Path=/products/new
#spring.cloud.gateway.routes[2].predicates[1]=Method=POST



#spring.cloud.gateway.routes.[2].id=pages2
#spring.cloud.gateway.routes.[2].uri=http://localhost:8180/
#spring.cloud.gateway.routes.[2].predicates[0]=Path=/shop/**
#spring.cloud.gateway.routes.[2].predicates[1]=Method=GET

#spring.cloud.gateway.routes[3].id=shop1
#spring.cloud.gateway.routes[3].uri=lb://shop
#spring.cloud.gateway.routes[3].predicates[0]=Path=/home/str
#spring.cloud.gateway.routes[3].predicates[0]=Path=/products/page/**
#spring.cloud.gateway.routes[3].predicates[1]=Method=GET

#spring.cloud.gateway.routes.[4].id=pages4
#spring.cloud.gateway.routes.[4].uri=http://localhost:8180
#spring.cloud.gateway.routes.[4].predicates[0]=Path=/home/str
#spring.cloud.gateway.routes.[4].predicates[1]=Method=GET



#spring.cloud.gateway.routes[6].id=shoph
#spring.cloud.gateway.routes[6].uri=lb://shop
#spring.cloud.gateway.routes[6].predicates[0]=Path=/products/h
#spring.cloud.gateway.routes[6].predicates[1]=Method=GET



#Keycloak
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/auth/realms/spring-microservice
#spring.security.oauth2.client.provider.keycloak.jwk-set-uri= http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
#spring.security.oauth2.resourceserver.jwt.issuer-uri= http://localhost:8080/realms/spring-microservice
#spring.security.oauth2.client.provider.keycloak.authorization-uri= http://localhost:8080/realms/spring-microservice/protocol/openid-connect/auth
#spring.security.oauth2.client.registration.keycloak.client-id= shop-gateway
#spring.security.oauth2.client.registration.keycloak.client-secret= FQFchTCC9OgSx2kYzUBOINdqaZXHevHf
#spring.security.oauth2.client.registration.keycloak.client-secret= a563e5iUsHp6B712uIgvq3IHZcaIYo2D
#spring.security.oauth2.client.registration.oauth2-client-credentials.provider= keycloak
#spring.security.oauth2.client.registration.keycloak.redirectUri=http://localhost:8073/*
#spring.security.oauth2.client.registration.keycloak.scope=profile,email,openid
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/spring-microservices-realm
#spring.security.oauth2.client.registration.keycloak.client-secret=NAptgnXlZSbs0wSXXvZDddcoX5ed96dY
#spring.security.oauth2.client.registration.keycloak.client-secret=nxEEYS7EvN8WEHIK8ljqP83JYdCJFEBy

#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/master
#spring.security.oauth2.client.registration.keycloak-rest.provider=keycloak
#spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8080/auth/realms/spring-microservice/protocol/openid-connect/auth
#spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8080/auth/realms/spring-microservice/protocol/openid-connect/token
#spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8080/auth/realms/spring-microservice/protocol/openid-connect/userinfo
#spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://localhost:8080/auth/realms/spring-microservice/protocol/openid-connect/certs


#spring.security.oauth2.client.registration.keycloak.redirectUri=*

#spring.security.oauth2.client.registration.keycloak-rest.authorization-grant-type=client_credentials
#yaml
server:
  port: 8073

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka





    security:
      oauth2:
        client:
          provider:
            keycloak:
              issuer-uri: http://localhost:8080/realms/spring-microservice
              jwk-set-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
          registration:
            quotes-client:
              provider: keycloak
              client-id: shop-gateway
              client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
              scope:
                - email
                - profile
                - roles
                  
      zipkin:
        baseUrl: http://zipkin:9411
      sleuth:
        sampler:
          percentage: 1
      cloud:
        loadbalancer.ribbon.enabled: false
                
                
     
